
<#
.SYNOPSIS
    Adds a new exception to the list of exceptions.
.DESCRIPTION
    This function creates a new exception object based on user-provided details, validates it, and checks for duplicates. 
    It then adds the new exception to the existing list and saves it to the specified JSON file. This function is designed 
    to be user-friendly with extensive help and error messages to guide users who may not be experienced with PowerShell.
.PARAMETER SpnNamePatterns
    A hashtable containing patterns for SPN name matching. Must include "patterns" (array of strings) and "match_type" (either "AND" or "OR").
.PARAMETER AzureScopeNamePatterns
    A hashtable containing patterns for Azure Scope name matching. Must include "patterns" (array of strings) and "match_type" (either "AND" or "OR").
.PARAMETER SpnEonid
    The department ID associated with the SPN (Service Principal).
.PARAMETER AzureScopeType
    An array specifying the types of Azure containers (e.g., "RG", "SUB", "MG") that the SPN has access to.
.PARAMETER Roles
    An array of roles assigned to the SPN on the Azure container. Possible roles include "User Access Administrator", "Owner", "Contributor", and "AppDevContributor".
.PARAMETER Environment
    The environment in which the SPN operates. Must be one of "Prod", "QA", "UAT", or "Dev".
.PARAMETER DynamicSpn
    A switch indicating whether the SPN is dynamic. This refers to whether the SPN itself changes or evolves over time.
.PARAMETER DynamicAzureScope
    A switch indicating whether the Azure containers (scopes) are dynamic. This refers to whether new resource groups or subscriptions are frequently created or removed.
.PARAMETER ExceptionType
    Specifies whether the exception is "permanent" or "temporary".
.PARAMETER SecArch
    (Optional) The SecArch-approved ID for permanent exceptions. This is recorded with an automatic "date added".
.PARAMETER ActionPlan
    (Optional) The ActionPlan ID for temporary exceptions that require cleanup. This is recorded with an automatic "date added" and requires an "expiration_date".
.PARAMETER ExpirationDate
    (Optional) The expiration date for temporary exceptions. Required if ActionPlan is provided.
.PARAMETER AzScopeEonid
    The department ID of the Azure container.
.PARAMETER AzScopeObjectid
    The ID of the Azure container (resource group, subscription, or management group).
.EXAMPLE
    # Example 1: Adding a permanent exception with a name-like pattern for the SPN
    $spnPatterns = @{
        patterns   = @("*example-spn*")
        match_type = "OR"
    }

    $azurePatterns = @{
        patterns   = @("*example-rg*")
        match_type = "AND"
    }

    Add-Exception -SpnNamePatterns $spnPatterns -AzureScopeNamePatterns $azurePatterns -SpnEonid "Dept001" `
                  -AzureScopeType @("RG") -Roles @("Owner") -Environment "Prod" -DynamicSpn:$false `
                  -DynamicAzureScope:$false -ExceptionType "permanent" -SecArch "SecArch123" `
                  -AzScopeEonid "Dept001" -AzScopeObjectid "Container123"

    # This adds an exception with the SPN having the "Owner" role on any RG with a name like "*example-rg*".
.EXAMPLE
    # Example 2: Adding a temporary exception with an ActionPlan
    $spnPatterns = @{
        patterns   = @("*temp-spn*")
        match_type = "AND"
    }

    $azurePatterns = @{
        patterns   = @("*temp-rg*")
        match_type = "OR"
    }

    Add-Exception -SpnNamePatterns $spnPatterns -AzureScopeNamePatterns $azurePatterns -SpnEonid "Dept002" `
                  -AzureScopeType @("SUB") -Roles @("Contributor") -Environment "Dev" -DynamicSpn:$true `
                  -DynamicAzureScope:$true -ExceptionType "temporary" -ActionPlan "Cleanup123" `
                  -ExpirationDate "2025-01-01" -AzScopeEonid "Dept002" -AzScopeObjectid "Container456"

    # This adds a temporary exception with a cleanup ActionPlan and an expiration date.
.NOTES
    Ensure that the JSON file where the exceptions are saved is correctly formatted and accessible.
#>
function Add-Exception {
    param (
        [Parameter(Mandatory = $true)]
        [hashtable]$SpnNamePatterns,

        [Parameter(Mandatory = $true)]
        [hashtable]$AzureScopeNamePatterns,

        [Parameter(Mandatory = $true)]
        [string]$SpnEonid,

        [Parameter(Mandatory = $true)]
        [string[]]$AzureScopeType,

        [Parameter(Mandatory = $true)]
        [string[]]$Roles,

        [Parameter(Mandatory = $true)]
        [string]$Environment,

        [switch]$DynamicSpn,

        [switch]$DynamicAzureScope,

        [Parameter(Mandatory = $true)]
        [string]$ExceptionType,

        [string]$SecArch,

        [string]$ActionPlan,

        [datetime]$ExpirationDate,

        [Parameter(Mandatory = $true)]
        [string]$AzScopeEonid,

        [Parameter(Mandatory = $true)]
        [string]$AzScopeObjectid
    )

    # Helper function to create dynamic filter
    function Create-DynamicFilter {
        param (
            [string[]]$Patterns,
            [string]$FilterType  # 'AND' or 'OR'
        )
        
        if ($Patterns.Count -eq 1) {
            return "($_ -like '$($Patterns[0]')"
        } elseif ($FilterType -eq "AND") {
            return ($Patterns | ForEach-Object { "($_ -like '$_')" }) -join ' -and '
        } else {
            return ($Patterns | ForEach-Object { "($_ -like '$_')" }) -join ' -or '
        }
    }

    # Create dynamic filters for SPN name and Azure Scope name
    $spnFilter = Create-DynamicFilter -Patterns $SpnNamePatterns.patterns -FilterType $SpnNamePatterns.match_type
    $azureScopeFilter = Create-DynamicFilter -Patterns $AzureScopeNamePatterns.patterns -FilterType $AzureScopeNamePatterns.match_type

    # Create the new exception object
    $newException = @{
        spnname_patterns       = $SpnNamePatterns
        azure_scope_name_patterns = $AzureScopeNamePatterns
        spn_eonid               = $SpnEonid
        azure_scope_type         = $AzureScopeType
        role                   = $Roles
        environment            = $Environment
        dynamic_spn            = [bool]$DynamicSpn
        dynamic_azure_scope    = [bool]$DynamicAzureScope
        exception_type         = $ExceptionType
        az_scope_eonid         = $AzScopeEonid
        az_scope_objectid      = $AzScopeObjectid
    }

    # Add SecArch or ActionPlan if provided and capture the date added
    if ($SecArch) {
        $newException.SecArch = @{
            id         = $SecArch
            date_added = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")
        }
    }

    if ($ActionPlan) {
        if (-not $ExpirationDate) {
            Write-Error "If an ActionPlan is provided, an ExpirationDate must be specified."
            return
        }
        $newException.ActionPlan = @{
            id            = $ActionPlan
            date_added    = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")
            expiration_date = $ExpirationDate.ToString("yyyy-MM-ddTHH:mm:ssZ")
        }
    }

    # Validate the new exception against the schema (assuming a Test-ExceptionSchema function exists)
    if (-not (Test-ExceptionSchema -Exception $newException)) {
        Write-Error "Validation failed. The exception could not be added."
        return
    }

    # Load the existing exceptions from the JSON file (assuming a file path is defined in the context)
    try {
        $exceptions = Get-Exceptions -FilePath $FilePath
    } catch {
        Write-Error "Failed to load the exceptions file: $_"
        return
    }

    # Check for duplicates using dynamic filters (basic logic placeholder, customizable for future)
    $duplicate = $exceptions.Exceptions | Where-Object {
        Invoke-Expression $spnFilter -and Invoke-Expression $azureScopeFilter -and `
        $_.azure_scope_type -eq $AzureScopeType -and $_.role -eq $Roles -and $_.environment -eq $Environment
    }

    if ($duplicate) {
        Write-Error "Duplicate exception found. No changes made."
        return
    }

    # Add the new exception to the list
    $exceptions.Exceptions += $newException

    # Save the updated exceptions list to the JSON file (assuming a Save-Exceptions function exists)
    try {
        Save-Exceptions -ExceptionsList $exceptions -FilePath $FilePath
    } catch {
        Write-Error "Failed to save the updated exceptions file: $_"
        return
    }

    Write-Host "New exception added successfully."
}

<#
.SYNOPSIS
    Validates an exception against the predefined schema.
.DESCRIPTION
    This function validates the provided exception object against a predefined JSON schema. It checks whether the exception 
    meets all required properties and matches the specified data types and constraints. The schema defines the structure and 
    rules for exceptions, ensuring consistency and accuracy in the data.
.PARAMETER Exception
    A hashtable containing the exception details that need to be validated against the schema.
.EXAMPLE
    # Validate a simple exception
    $exception = @{
        spnname_patterns = @{
            patterns   = @("*example-spn*")
            match_type = "AND"
        }
        azure_scope_name_patterns = @{
            patterns   = @("*example-rg*")
            match_type = "OR"
        }
        spn_eonid           = "Dept001"
        azure_scope_type    = @("RG")
        role                = @("Owner")
        environment         = "Prod"
        dynamic_spn         = $false
        dynamic_azure_scope = $false
        exception_type      = "permanent"
        az_scope_eonid      = "Dept001"
        az_scope_objectid   = "Container123"
    }

    $isValid = Test-ExceptionSchema -Exception $exception
    if ($isValid) {
        Write-Host "The exception is valid."
    } else {
        Write-Error "The exception failed validation."
    }
.NOTES
    The validation schema is assumed to be predefined. Any changes in the exception structure should be reflected in the schema.
#>
function Test-ExceptionSchema {
    param (
        [Parameter(Mandatory = $true)]
        [hashtable]$Exception
    )

    # Define the JSON schema as a PowerShell hashtable
    $schema = @{
        "type" = "object"
        "properties" = @{
            "spnname_patterns" = @{
                "type" = "object"
                "properties" = @{
                    "patterns" = @{
                        "type" = "array"
                        "items" = @{ "type" = "string" }
                    }
                    "match_type" = @{
                        "type" = "string"
                        "enum" = @("AND", "OR")
                    }
                }
                "required" = @("patterns", "match_type")
            }
            "azure_scope_name_patterns" = @{
                "type" = "object"
                "properties" = @{
                    "patterns" = @{
                        "type" = "array"
                        "items" = @{ "type" = "string" }
                    }
                    "match_type" = @{
                        "type" = "string"
                        "enum" = @("AND", "OR")
                    }
                }
                "required" = @("patterns", "match_type")
            }
            "spn_eonid" = @{ "type" = "string" }
            "azure_scope_type" = @{
                "type" = "array"
                "items" = @{ "type" = "string"; "enum" = @("RG", "SUB", "MG") }
            }
            "role" = @{
                "type" = "array"
                "items" = @{ "type" = "string"; "enum" = @("User Access Administrator", "Owner", "Contributor", "AppDevContributor") }
            }
            "environment" = @{
                "type" = "string"
                "enum" = @("Prod", "QA", "UAT", "Dev")
            }
            "dynamic_spn" = @{ "type" = "boolean" }
            "dynamic_azure_scope" = @{ "type" = "boolean" }
            "exception_type" = @{
                "type" = "string"
                "enum" = @("permanent", "temporary")
            }
            "SecArch" = @{
                "type" = "object"
                "properties" = @{
                    "id" = @{ "type" = "string" }
                    "date_added" = @{ "type" = "string"; "format" = "date-time" }
                }
            }
            "ActionPlan" = @{
                "type" = "object"
                "properties" = @{
                    "id" = @{ "type" = "string" }
                    "date_added" = @{ "type" = "string"; "format" = "date-time" }
                    "expiration_date" = @{ "type" = "string"; "format" = "date-time" }
                }
            }
            "az_scope_eonid" = @{ "type" = "string" }
            "az_scope_objectid" = @{ "type" = "string" }
        }
        "required" = @(
            "spnname_patterns",
            "azure_scope_name_patterns",
            "spn_eonid",
            "azure_scope_type",
            "role",
            "environment",
            "dynamic_spn",
            "dynamic_azure_scope",
            "exception_type",
            "az_scope_eonid",
            "az_scope_objectid"
        )
        "dependencies" = @{
            "ActionPlan" = @("expiration_date")
        }
    }

    # Validate the Exception against the schema
    try {
        # Convert schema and exception into JSON strings
        $schemaJson = $schema | ConvertTo-Json -Depth 10
        $exceptionJson = $Exception | ConvertTo-Json -Depth 10

        # Use PowerShell's native JSON schema validation if available, or custom validation logic (example below)
        if (-not (Test-JsonSchema -Json $exceptionJson -Schema $schemaJson)) {
            return $false
        }

        return $true
    } catch {
        Write-Error "Exception validation failed: $_"
        return $false
    }
}
