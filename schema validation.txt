schema validation

function Validate-ExceptionSchema {
    param (
        [Parameter(Mandatory = $true)]
        [hashtable]$Exception
    )

    $validationErrors = @()

    # Required field check
    if (-not $Exception.ContainsKey("spnname_patterns")) {
        $validationErrors += "Missing required field: spnname_patterns."
    }
    if (-not $Exception.ContainsKey("SPNdeptID")) {
        $validationErrors += "Missing required field: SPNdeptID."
    }
    if (-not $Exception.ContainsKey("containertype")) {
        $validationErrors += "Missing required field: containertype."
    }
    if (-not $Exception.ContainsKey("role")) {
        $validationErrors += "Missing required field: role."
    }
    if (-not $Exception.ContainsKey("environment")) {
        $validationErrors += "Missing required field: environment."
    }
    if (-not $Exception.ContainsKey("dynamic")) {
        $validationErrors += "Missing required field: dynamic."
    }
    if (-not $Exception.ContainsKey("dynamic_scope")) {
        $validationErrors += "Missing required field: dynamic_scope."
    }
    if (-not $Exception.ContainsKey("exception_type")) {
        $validationErrors += "Missing required field: exception_type."
    }

    # Field type validation
    if ($Exception.SPNdeptID -and -not ($Exception.SPNdeptID -is [string])) {
        $validationErrors += "Field SPNdeptID must be a string."
    }
    if ($Exception.containertype -and -not ($Exception.containertype -is [array])) {
        $validationErrors += "Field containertype must be an array."
    }
    if ($Exception.role -and -not ($Exception.role -is [array])) {
        $validationErrors += "Field role must be an array."
    }
    if ($Exception.environment -and -not ($Exception.environment -is [string])) {
        $validationErrors += "Field environment must be a string."
    }
    if ($Exception.dynamic -and -not ($Exception.dynamic -is [boolean])) {
        $validationErrors += "Field dynamic must be a boolean."
    }
    if ($Exception.dynamic_scope -and -not ($Exception.dynamic_scope -is [boolean])) {
        $validationErrors += "Field dynamic_scope must be a boolean."
    }
    if ($Exception.exception_type -and -not ($Exception.exception_type -is [string])) {
        $validationErrors += "Field exception_type must be a string."
    }

    # Enum validation for certain fields
    $validContainerTypes = @("RG", "sub", "MG")
    if ($Exception.containertype -and !($Exception.containertype -contains $validContainerTypes)) {
        $validationErrors += "Field containertype contains invalid values. Allowed values are 'RG', 'sub', 'MG'."
    }

    $validRoles = @("UAA", "owner", "contributor")
    if ($Exception.role -and !($Exception.role -contains $validRoles)) {
        $validationErrors += "Field role contains invalid values. Allowed values are 'UAA', 'owner', 'contributor'."
    }

    $validEnvironments = @("Prod", "QA", "UAT", "Dev")
    if ($Exception.environment -and !($validEnvironments -contains $Exception.environment)) {
        $validationErrors += "Field environment contains invalid values. Allowed values are 'Prod', 'QA', 'UAT', 'Dev'."
    }

    # Return validation results
    if ($validationErrors.Count -eq 0) {
        Write-Host "Validation passed."
        return $true
    } else {
        Write-Host "Validation failed with errors:"
        $validationErrors | ForEach-Object { Write-Host $_ }
        return $false
    }
}

# Example Usage
$exception = @{
    spnname_patterns = @{
        patterns = @("*prod*", "*service*")
        match_type = "OR"
    }
    SPNdeptID = "Dept001"
    containertype = @("RG", "sub")
    role = @("owner")
    environment = "Prod"
    dynamic = $true
    dynamic_scope = $false
    exception_type = "dynamic"
    expiration_date = "2024-12-31T23:59:59Z"
}

# Run the validation
$valid = Validate-ExceptionSchema -Exception $exception
if ($valid) {
    Write-Host "Exception is valid."
} else {
    Write-Host "Exception is invalid."
}


# Assuming you have the Add-Exception function

$exceptions = Load-Exceptions -FilePath "C:\path\to\exceptions.json"

$spnNamePatterns = @{
    patterns = @("*service*", "*prod*")
    match_type = "OR"
}

$newException = @{
    spnname_patterns = $spnNamePatterns
    SPNdeptID = "Dept001"
    containertype = @("RG", "sub")
    role = @("owner")
    environment = "Prod"
    dynamic = $true
    dynamic_scope = $false
    exception_type = "dynamic"
    expiration_date = "2024-12-31T23:59:59Z"
}

# Validate before adding the exception
if (Validate-ExceptionSchema -Exception $newException) {
    Add-Exception -SpnNamePatterns $spnNamePatterns `
                  -SPNDeptID "Dept001" `
                  -ContainerTypes @("RG", "sub") `
                  -Roles @("owner") `
                  -Environment "Prod" `
                  -Dynamic $true `
                  -DynamicScope $false `
                  -ExceptionType "dynamic" `
                  -ExpirationDate (Get-Date).AddMonths(6) `
                  -ExceptionsList ([ref]$exceptions)

    # Save after adding
    Save-Exceptions -ExceptionsList $exceptions -FilePath "C:\path\to\exceptions.json"
}
