        It 'Should add a new exception to a valid exceptions.json file' {
            # Mocking a file path for testing purposes
            $testFilePath = Join-Path $PSScriptRoot "..\exceptions.json"
            $spnNamePatterns = @{
                patterns = @("*prod*", "*service*")
                match_type = "OR"
            }

            # Create a test exceptions file with minimal content
            $testContent = @{
                Exceptions = @()
            }
            $testContent | ConvertTo-Json | Out-File -FilePath $testFilePath -Force

            Add-Exception -SpnNamePatterns $spnNamePatterns `
                          -SPNDeptID "Dept001" `
                          -ContainerTypes @("RG") `
                          -Roles @("owner") `
                          -Environment "Prod" `
                          -Dynamic $true `
                          -DynamicScope $false `
                          -ExceptionType "dynamic" `
                          -ExpirationDate (Get-Date).AddMonths(6)

            # Check that the file was updated correctly
            $updatedExceptions = Get-Exceptions
            $updatedExceptions.Exceptions.Count | Should -BeGreaterThan 0
        }

        It 'Should throw an error if a duplicate exception is added' {
            # Duplicate test case
            $testFilePath = Join-Path $PSScriptRoot "..\exceptions.json"
            $spnNamePatterns = @{
                patterns = @("*prod*", "*service*")
                match_type = "OR"
            }

            # Add the same exception twice, expecting the second to fail
            Add-Exception -SpnNamePatterns $spnNamePatterns `
                          -SPNDeptID "Dept001" `
                          -ContainerTypes @("RG") `
                          -Roles @("owner") `
                          -Environment "Prod" `
                          -Dynamic $true `
                          -DynamicScope $false `
                          -ExceptionType "dynamic" `
                          -ExpirationDate (Get-Date).AddMonths(6)

            { Add-Exception -SpnNamePatterns $spnNamePatterns `
                            -SPNDeptID "Dept001" `
                            -ContainerTypes @("RG") `
                            -Roles @("owner") `
                            -Environment "Prod" `
                            -Dynamic $true `
                            -DynamicScope $false `
                            -ExceptionType "dynamic" `
                            -ExpirationDate (Get-Date).AddMonths(6) } | Should -Throw "Duplicate exception found"
        }
    }

    # Test for Save-Exceptions
    Describe 'Save-Exceptions' {
        It 'Should save exceptions to a valid file path' {
            $testFilePath = Join-Path $PSScriptRoot "..\exceptions.json"
            $testExceptions = @{
                Exceptions = @(
                    @{
                        spnname_patterns = @{
                            patterns = @("*prod*", "*service*")
                            match_type = "OR"
                        }
                        SPNdeptID = "Dept001"
                        containertype = @("RG")
                        role = @("owner")
                        environment = "Prod"
                        dynamic = $true
                        dynamic_scope = $false
                        exception_type = "dynamic"
                    }
                )
            }

            Save-Exceptions -ExceptionsList $testExceptions

            # Verify the file was saved
            $fileContent = Get-Content -Path $testFilePath -Raw | ConvertFrom-Json
            $fileContent.Exceptions.Count | Should -Be 1
        }

        It 'Should throw an error if it fails to save' {
            # Test with an invalid file path
            $invalidFilePath = "C:\invalid\path\exceptions.json"
            $exceptions = @{
                Exceptions = @()
            }

            { Save-Exceptions -ExceptionsList $exceptions } | Should -Throw
        }
    }

}
