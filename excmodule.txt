# Function to load exceptions from a JSON file
function Load-Exceptions {
    param (
        [Parameter(Mandatory = $true)]
        [string]$FilePath
    )
    
    try {
        if (Test-Path $FilePath) {
            $jsonContent = Get-Content -Path $FilePath -Raw
            $exceptions = $jsonContent | ConvertFrom-Json
            return $exceptions
        } else {
            throw "File not found: $FilePath"
        }
    } catch {
        Write-Error "Failed to load exceptions from $FilePath. $_"
    }
}

# Function to validate an exception based on a manual schema
function Validate-ExceptionSchema {
    param (
        [Parameter(Mandatory = $true)]
        [hashtable]$Exception
    )

    $validationErrors = @()

    # Required field check
    if (-not $Exception.ContainsKey("spnname_patterns")) {
        $validationErrors += "Missing required field: spnname_patterns."
    }
    if (-not $Exception.ContainsKey("SPNdeptID")) {
        $validationErrors += "Missing required field: SPNdeptID."
    }
    if (-not $Exception.ContainsKey("containertype")) {
        $validationErrors += "Missing required field: containertype."

function Add-Exception {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [hashtable]$SpnNamePatterns,
        [Parameter(Mandatory = $true)]
        [string]$SPNDeptID,
        [Parameter(Mandatory = $true)]
        [array]$ContainerTypes,
        [Parameter(Mandatory = $true)]
        [array]$Roles,
        [Parameter(Mandatory = $true)]
        [string]$Environment,
        [Parameter(Mandatory = $true)]
        [bool]$Dynamic,
        [Parameter(Mandatory = $true)]
        [bool]$DynamicScope,
        [Parameter(Mandatory = $true)]
        [string]$ExceptionType,
        [datetime]$ExpirationDate = $null,
        [Parameter(Mandatory = $true)]
        [string]$FilePath
    )

    try {
        # Build the new exception object
        $newException = @{
            spnname_patterns = $SpnNamePatterns
            SPNdeptID        = $SPNDeptID
            containertype    = $ContainerTypes
            role             = $Roles
            environment      = $Environment
            dynamic          = $Dynamic
            dynamic_scope    = $DynamicScope
            exception_type   = $ExceptionType
            expiration_date  = $ExpirationDate
        }

        # Validate the new exception against the schema
        if (-not (Test-ExceptionSchema -Exception $newException)) {
            Write-Error "Validation failed. The exception could not be added."
            return
        }

        # Load the existing exceptions from the JSON file
        try {
            $exceptions = Get-Exceptions -FilePath $FilePath
        } catch {
            Write-Error "Failed to load the exceptions file: $_"
            return
        }

        # Check for duplicates
        $duplicate = $exceptions.Exceptions | Where-Object {
            $_.spnname_patterns.patterns -eq $SpnNamePatterns.patterns -and
            $_.containertype -eq $ContainerTypes -and
            $_.role -eq $Roles -and
            $_.environment -eq $Environment
        }

        if ($duplicate) {
            Write-Error "Duplicate exception found. No changes made."
            return
        }

        # Add the new exception to the list
        $exceptions.Exceptions += $newException

        # Save the updated exceptions list to the JSON file
        try {
            Save-Exceptions -ExceptionsList $exceptions -FilePath $FilePath
        } catch {
            Write-Error "Failed to save the updated exceptions file: $_"
            return
        }

        Write-Host "New exception added successfully."
    } catch {
        Write-Error "An unexpected error occurred: $_"
    }
}

   
