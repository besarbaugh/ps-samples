<#
.SYNOPSIS
    Validates an exception entry against a predefined JSON schema.
.DESCRIPTION
    This function takes an exception entry as input and validates it against a JSON schema that defines the structure and rules for the data.
    It checks for required fields, correct data types, and allowed values to ensure the integrity of the exceptions.
.PARAMETER ExceptionEntry
    The exception entry to validate against the JSON schema.
.PARAMETER SchemaPath
    The file path to the JSON schema that defines the exception structure.
.OUTPUTS
    Boolean
        Returns $true if the entry is valid, otherwise returns $false.
.EXAMPLE
    $isValid = Test-ExceptionSchema -ExceptionEntry $newException -SchemaPath "path/to/schema.json"
    if ($isValid) {
        Write-Host "Exception entry is valid."
    } else {
        Write-Host "Exception entry is not valid."
    }
.NOTES
    This function requires the presence of a JSON schema that defines the structure and validation rules for exceptions.
#>
function Test-ExceptionSchema {
    param (
        [Parameter(Mandatory = $true)]
        [hashtable]$ExceptionEntry,

        [Parameter(Mandatory = $true)]
        [string]$SchemaPath
    )

    # Load the JSON schema
    $schema = Get-Content -Path $SchemaPath | ConvertFrom-Json

    # Validate the ExceptionEntry using the JSON schema
    $isValid = $true
    foreach ($requiredField in $schema.required) {
        if (-not $ExceptionEntry.ContainsKey($requiredField)) {
            Write-Host "Validation failed: Missing required field '$requiredField'."
            $isValid = $false
        }
    }

    if ($isValid) {
        Write-Host "Validation passed: Exception entry is valid."
    } else {
        Write-Host "Validation failed: Exception entry is not valid."
    }

    return $isValid
}

<#
.SYNOPSIS
    Adds a new exception to the exceptions JSON file after validating the entry.
.DESCRIPTION
    This function adds a new exception entry to a JSON file after validating it against a predefined schema.
    If the validation fails, the exception will not be added to the JSON file.
.PARAMETER ExceptionEntry
    The new exception entry to add to the JSON file.
.PARAMETER SchemaPath
    The file path to the JSON schema that defines the exception structure.
.PARAMETER ExceptionsPath
    The file path to the exceptions JSON file where the entry will be added.
.EXAMPLE
    $newException = @{
        "spn_name" = "Example-SPN"
        "spn_eonid" = "EON123"
        "spn_object_id" = "abcd-1234-5678-efgh"
        # Other properties...
    }
    Add-Exception -ExceptionEntry $newException -SchemaPath "path/to/schema.json" -ExceptionsPath "path/to/exceptions.json"
.NOTES
    This function uses the Test-ExceptionSchema function to validate new entries before adding them to the JSON file.
#>
function Add-Exception {
    param (
        [Parameter(Mandatory = $true)]
        [hashtable]$ExceptionEntry,

        [Parameter(Mandatory = $true)]
        [string]$SchemaPath,

        [Parameter(Mandatory = $true)]
        [string]$ExceptionsPath
    )

    # Validate the entry against the schema
    if (-not (Test-ExceptionSchema -ExceptionEntry $ExceptionEntry -SchemaPath $SchemaPath)) {
        Write-Host "Cannot add exception: Entry did not pass validation."
        return
    }

    # Load existing exceptions
    $exceptions = Get-Content -Path $ExceptionsPath | ConvertFrom-Json

    # Add the new exception entry to the existing exceptions
    $exceptions.Exceptions += $ExceptionEntry

    # Save the updated exceptions back to the file
    $exceptions | ConvertTo-Json -Depth 5 | Set-Content -Path $ExceptionsPath

    Write-Host "Exception added successfully."
}

