<#
.SYNOPSIS
    Adds a new exception to a JSON file based on the defined schema.

.DESCRIPTION
    This function creates a new exception object, validates key parameters, and then adds it to an existing JSON file. 
    If the JSON file is empty or does not exist, the function initializes it with an empty array. The function supports
    adding an ActionPlan or SecArch using parameter sets, simplifying the input for users.

.PARAMETER SPNObjectID
    The Object ID of the Service Principal (SPN). Either this or SPNNameLike is required.

.PARAMETER SPNNameLike
    A pattern for SPN name matching. Either this or SPNObjectID is required.

.PARAMETER Roles
    An array of roles assigned to the SPN. Single or multiple roles can be provided. Example: @("uaa", "owner")

.PARAMETER AzScopeObjectID
    The Object ID of the Azure Scope (Resource Group, Subscription, or Management Group). Either this or AzScopeNameLike is required.

.PARAMETER AzScopeNameLike
    A pattern for Azure Scope name matching. Either this or AzScopeObjectID is required.

.PARAMETER AzureScopeType
    The type of Azure Scope (RG, Sub, MG). This helps determine if EonID matching is relevant.

.PARAMETER SPNEonID
    The EonID (or department ID) associated with the SPN. Optional if the container type is not a Resource Group.

.PARAMETER AzScopeEonID
    The EonID (or department ID) associated with the Azure Scope. Optional if the container type is not a Resource Group.

.PARAMETER ActionPlanID
    The ID of the ActionPlan to be added. Required if adding an ActionPlan.

.PARAMETER DateAdded
    The date the ActionPlan or SecArch was added. Defaults to the current date in "yyyy-MM-dd" format.

.PARAMETER ExpirationDate
    The expiration date of the ActionPlan. Required if adding an ActionPlan.

.PARAMETER SecArchID
    The ID of the SecArch to be added. Required if adding a SecArch.

.PARAMETER FilePath
    The path of the JSON file to which the exception will be added. If the file does not exist, it will be created.

.EXAMPLE
    # Example 1: Add an exception with ActionPlan and default DateAdded
    Add-Exception -SPNObjectID "12345-abcde-67890" -Roles @("uaa") `
        -AzScopeObjectID "54321-edcba-09876" -AzureScopeType "RG" `
        -SPNEonID "Dept-001" -AzScopeEonID "Dept-001" `
        -ActionPlanID "T123" -ExpirationDate "2025-10-21" `
        -FilePath "C:\path\to\exceptions.json"

.EXAMPLE
    # Example 2: Add an exception with SecArch and custom DateAdded
    Add-Exception -SPNObjectID "54321-zyxwv-12345" -Roles @("uaa") `
        -AzScopeObjectID "67890-abcdef-98765" -AzureScopeType "MG" `
        -SPNEonID "Dept-002" -AzScopeEonID "Dept-002" `
        -SecArchID "Sec-001" -DateAdded "2024-10-01" `
        -FilePath "C:\path\to\exceptions.json"

.NOTES
    This function supports adding flexible exceptions based on Object IDs or name-like patterns. It also accommodates 
    dynamic behaviors based on different types of Azure containers. Default values are used for DateAdded to reduce input complexity.
#>
function Add-Exception {
    [CmdletBinding(DefaultParameterSetName = 'ActionPlanSet')]
    param (
        # Core Parameters
        [Parameter(Mandatory = $false)]
        [string]$SPNObjectID,

        [Parameter(Mandatory = $false)]
        [string]$SPNNameLike,

        [Parameter(Mandatory = $true)]
        [ValidateSet("uaa", "owner", "reader", "contributor", "AppDevContributor")]  # ValidateSet for Roles
        [string[]]$Roles,

        [Parameter(Mandatory = $false)]
        [string]$AzScopeObjectID,

        [Parameter(Mandatory = $false)]
        [string]$AzScopeNameLike,

        [Parameter(Mandatory = $true)]
        [ValidateSet("RG", "Sub", "MG")]
        [string]$AzureScopeType,

        [Parameter(Mandatory = $false)]
        [string]$SPNEonID,

        [Parameter(Mandatory = $false)]
        [string]$AzScopeEonID,

        # ActionPlan Parameter Set
        [Parameter(Mandatory = $false, ParameterSetName = 'ActionPlanSet')]
        [string]$ActionPlanID,

        [Parameter(Mandatory = $false, ParameterSetName = 'ActionPlanSet')]
        [string]$DateAdded = (Get-Date -Format "yyyy-MM-dd"),  # Default to current date

        [Parameter(Mandatory = $true, ParameterSetName = 'ActionPlanSet')]
        [string]$ExpirationDate,

        # SecArch Parameter Set
        [Parameter(Mandatory = $true, ParameterSetName = 'SecArchSet')]
        [string]$SecArchID,

        [Parameter(Mandatory = $false, ParameterSetName = 'SecArchSet')]
        [string]$SecArchDateAdded = (Get-Date -Format "yyyy-MM-dd"),  # Default to current date

        # File Path
        [Parameter(Mandatory = $true)]
        [string]$FilePath
    )

    # Validate SPN identifiers
    if (-not $SPNObjectID -and -not $SPNNameLike) {
        Write-Error "You must specify either SPNObjectID or SPNNameLike."
        return
    }

    # Validate Azure Scope identifiers
    if (-not $AzScopeObjectID -and -not $AzScopeNameLike) {
        Write-Error "You must specify either AzScopeObjectID or AzScopeNameLike."
        return
    }

    # Validate EonID presence if required for Resource Groups
    if ($AzureScopeType -eq "RG" -and $SPNEonID -and $AzScopeEonID) {
        if ($SPNEonID -ne $AzScopeEonID) {
            Write-Error "SPN EonID and Azure Scope EonID must match for Resource Groups when both are provided."
            return
        }
    }

    # Convert roles: "uaa" to "User Access Administrator"
    $Roles = $Roles | ForEach-Object {
        if ($_ -eq "uaa") {
            "User Access Administrator"
        }
        else {
            $_
        }
    }

    # Validate ActionPlan or SecArch
    $ActionPlan = $null
    $SecArch = $null

    if ($PSCmdlet.ParameterSetName -eq 'ActionPlanSet') {
        $ActionPlan = @{
            ID = $ActionPlanID
            DateAdded = $DateAdded
            ExpirationDate = $ExpirationDate
        }
    }
    elseif ($PSCmdlet.ParameterSetName -eq 'SecArchSet') {
        $SecArch = @{
            ID = $SecArchID
            DateAdded = $SecArchDateAdded
        }
    }
    else {
        Write-Error "You must specify either ActionPlan or SecArch."
        return
    }

    # Load the existing JSON file (initialize as an empty array if it is empty)
    $currentData = @()
    if (Test-Path $FilePath) {
        $jsonContent = Get-Content -Path $FilePath -Raw
        if (-not [string]::IsNullOrWhiteSpace($jsonContent)) {
            $currentData = $jsonContent | ConvertFrom-Json

            # Convert to array if only a single entry exists in the JSON
            if ($currentData -is [hashtable]) {
                $currentData = @($currentData)
            }
        }
    }

    # Create the new exception object
    $newException = @{
        "SPNObjectID" = $SPNObjectID
        "SPNNameLike" = $SPNNameLike
        "Roles" = $Roles
        "AzScopeObjectID" = $AzScopeObjectID
        "AzScopeNameLike" = $AzScopeNameLike
        "AzureScopeType" = $AzureScopeType
        "SPNEonID" = $SPNEonID
        "AzScopeEonID" = $AzScopeEonID
        "ActionPlan" = $ActionPlan
        "SecArch" = $SecArch
    }

    # Append the new exception object to the current data
    $currentData += $newException

    # Convert back to JSON and save
    $currentData | ConvertTo-Json -Depth 10 | Set-Content -Path $FilePath -Force
    Write-Output "Exception added to JSON file at: $FilePath"
}




####


# Pester tests for Add-Exception with Role Validation and Conversion

Describe 'Add-Exception with Role Validation and Conversion' {
    $testFilePath = "C:\path\to\test-exceptions.json"

    BeforeAll {
        # Initialize an empty JSON file before starting the tests
        Initialize-EmptyJson -FilePath $testFilePath
    }

    AfterEach {
        # Reset the file content after each test to ensure a clean slate
        @() | ConvertTo-Json | Set-Content -Path $testFilePath -Force
    }

    It 'Should add an exception with ActionPlan and default DateAdded, and convert "uaa" role' {
        $roles = @("uaa")

        Add-Exception -SPNObjectID "12345-abcde-67890" -Roles $roles `
            -AzScopeObjectID "54321-edcba-09876" -AzureScopeType "RG" `
            -SPNEonID "Dept-001" -AzScopeEonID "Dept-001" `
            -ActionPlanID "T123" -ExpirationDate "2025-10-21" `
            -FilePath $testFilePath

        # Load and validate the JSON
        $result = Get-Content -Path $testFilePath -Raw | ConvertFrom-Json
        $result | Should -HaveCount 1
        $result[0].Roles | Should -Contain "User Access Administrator"
        $result[0].ActionPlan.DateAdded | Should -Be (Get-Date -Format "yyyy-MM-dd")
    }

    It 'Should fail if an invalid role is provided' {
        $roles = @("invalid-role")

        { Add-Exception -SPNObjectID "12345-abcde-67890" -Roles $roles `
            -AzScopeObjectID "54321-edcba-09876" -AzureScopeType "RG" `
            -SPNEonID "Dept-001" -AzScopeEonID "Dept-001" `
            -ActionPlanID "T123" -ExpirationDate "2025-10-21" `
            -FilePath $testFilePath } | Should -Throw
    }

    It 'Should add an exception with SecArch and default DateAdded, and convert "uaa" role' {
        $roles = @("uaa")

        Add-Exception -SPNObjectID "54321-zyxwv-12345" -Roles $roles `
            -AzScopeObjectID "67890-abcdef-98765" -AzureScopeType "MG" `
            -SPNEonID "Dept-002" -AzScopeEonID "Dept-002" `
            -SecArchID "Sec-001" `
            -FilePath $testFilePath

        # Load and validate the JSON
        $result = Get-Content -Path $testFilePath -Raw | ConvertFrom-Json
        $result | Should -HaveCount 1
        $result[0].Roles | Should -Contain "User Access Administrator"
        $result[0].SecArch.DateAdded | Should -Be (Get-Date -Format "yyyy-MM-dd")
    }

    It 'Should add an exception with ActionPlan and provided DateAdded' {
        $roles = @("owner")

        Add-Exception -SPNObjectID "55555-aaaaa-99999" -Roles $roles `
            -AzScopeObjectID "98765-wxyz-00000" -AzureScopeType "Sub" `
            -SPNEonID "Dept-003" -AzScopeEonID "Dept-003" `
            -ActionPlanID "T456" -DateAdded "2024-10-01" -ExpirationDate "2025-12-31" `
            -FilePath $testFilePath

        # Load and validate the JSON
        $result = Get-Content -Path $testFilePath -Raw | ConvertFrom-Json
        $result | Should -HaveCount 1
        $result[0].ActionPlan.DateAdded | Should -Be "2024-10-01"
        $result[0].ActionPlan.ExpirationDate | Should -Be "2025-12-31"
    }

    It 'Should fail if no ActionPlan or SecArch parameter set is provided' {
        $roles = @("owner")

        { Add-Exception -SPNObjectID "11111-aaaaa-33333" -Roles $roles `
            -AzScopeObjectID "22222-bbbb-44444" -AzureScopeType "RG" `
            -SPNEonID "Dept-004" -AzScopeEonID "Dept-004" `
            -FilePath $testFilePath } | Should -Throw
    }

    It 'Should add an exception with multiple roles in array' {
        $roles = @("uaa", "owner")

        Add-Exception -SPNObjectID "66666-cccc-77777" -Roles $roles `
            -AzScopeObjectID "88888-ddddd-99999" -AzureScopeType "RG" `
            -SPNEonID "Dept-005" -AzScopeEonID "Dept-005" `
            -ActionPlanID "T789" -ExpirationDate "2026-01-01" `
            -FilePath $testFilePath

        # Load and validate the JSON
        $result = Get-Content -Path $testFilePath -Raw | ConvertFrom-Json
        $result | Should -HaveCount 1
        $result[0].Roles | Should -Contain "User Access Administrator"
        $result[0].Roles | Should -Contain "owner"
    }
}
