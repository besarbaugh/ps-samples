<#
.SYNOPSIS
    Adds a new exception to a JSON file based on the defined schema.

.DESCRIPTION
    This function creates a new exception object, validates key parameters, checks the schema using Test-SchemaValidation, 
    and then adds it to an existing JSON file. If the JSON file is empty or does not exist, the function initializes it 
    with an empty array. The function uses a single parameter set with either SecArchID or ActionPlanID as a mandatory 
    parameter, simplifying the input for users.

.PARAMETER spnObjectId
    The Object ID of the Service Principal (SPN). Either this or spnNameLike is required.

.PARAMETER spnNameLike
    A pattern for SPN name matching. Either this or spnObjectId is required.

.PARAMETER roles
    An array of roles assigned to the SPN. Single or multiple roles can be provided. Example: @("uaa", "owner")

.PARAMETER azObjectScopeId
    The Object ID of the Azure Scope (Resource Group, Subscription, or Management Group). Either this or azScopeNameLike is required.

.PARAMETER azScopeNameLike
    A pattern for Azure Scope name matching. Either this or azObjectScopeId is required.

.PARAMETER azureScopeType
    The type of Azure Scope (RG, Sub, MG). This helps determine if EonID matching is relevant.

.PARAMETER spnEonId
    The EonID (or department ID) associated with the SPN. Optional if the container type is not a Resource Group.

.PARAMETER azScopeEonId
    The EonID (or department ID) associated with the Azure Scope. Optional if the container type is not a Resource Group.

.PARAMETER actionPlanId
    The ID of the ActionPlan to be added. Required if SecArchID is not provided.

.PARAMETER dateAdded
    The date the ActionPlan or SecArch was added. Defaults to the current date in "yyyy-MM-dd" format.

.PARAMETER expirationDate
    The expiration date of the ActionPlan. Required if ActionPlanID is provided.

.PARAMETER secArchId
    The ID of the SecArch to be added. Required if ActionPlanID is not provided.

.PARAMETER filePath
    The path of the JSON file to which the exception will be added. Defaults to ".\exceptions.json" if not specified.

.EXAMPLE
    # Example 1: Add an exception with ActionPlan and default DateAdded
    Add-Exception -spnObjectId "12345-abcde-67890" -roles @("uaa") `
        -azObjectScopeId "54321-edcba-09876" -azureScopeType "RG" `
        -spnEonId "Dept-001" -azScopeEonId "Dept-001" `
        -actionPlanId "T123" -expirationDate "2025-10-21"

.EXAMPLE
    # Example 2: Add an exception with SecArch and custom DateAdded
    Add-Exception -spnObjectId "54321-zyxwv-12345" -roles @("uaa") `
        -azObjectScopeId "67890-abcdef-98765" -azureScopeType "MG" `
        -spnEonId "Dept-002" -azScopeEonId "Dept-002" `
        -secArchId "Sec-001" -dateAdded "2024-10-01"

.NOTES
    This function supports adding flexible exceptions based on Object IDs or name-like patterns. It also accommodates 
    dynamic behaviors based on different types of Azure containers. Default values are used for DateAdded to reduce input complexity.
#>
function Add-Exception {
    [CmdletBinding()]
    param (
        # Core Parameters
        [Parameter(Mandatory = $false)]
        [string]$spnObjectId,

        [Parameter(Mandatory = $false)]
        [string]$spnNameLike,

        [Parameter(Mandatory = $true)]
        [ValidateSet("uaa", "owner", "reader", "contributor", "AppDevContributor")]  # ValidateSet for Roles
        [string[]]$roles,

        [Parameter(Mandatory = $false)]
        [string]$azObjectScopeId,

        [Parameter(Mandatory = $false)]
        [string]$azScopeNameLike,

        [Parameter(Mandatory = $true)]
        [ValidateSet("RG", "Sub", "MG")]
        [string]$azureScopeType,

        [Parameter(Mandatory = $false)]
        [string]$spnEonId,

        [Parameter(Mandatory = $false)]
        [string]$azScopeEonId,

        # ActionPlan and SecArch
        [Parameter(Mandatory = $false)]
        [string]$actionPlanId,

        [Parameter(Mandatory = $false)]
        [ValidateScript({ Validate-DateFormat $_ })]  # Custom function for validation
        [object]$dateAdded = (Get-Date -Format "yyyy-MM-dd"),  # Default to current date

        [Parameter(Mandatory = $false)]
        [ValidateScript({ Validate-DateFormat $_ })]  # Custom function for validation
        [object]$expirationDate,

        [Parameter(Mandatory = $false)]
        [string]$secArchId,

        # File Path
        [string]$filePath = ".\exceptions.json"
    )

    # Validate mandatory parameters
    if (-not $spnObjectId -and -not $spnNameLike) {
        Write-Error "You must specify either spnObjectId or spnNameLike."
        return
    }

    if (-not $azObjectScopeId -and -not $azScopeNameLike) {
        Write-Error "You must specify either azObjectScopeId or azScopeNameLike."
        return
    }

    if (-not $actionPlanId -and -not $secArchId) {
        Write-Error "You must specify either actionPlanId or secArchId."
        return
    }

    if ($actionPlanId -and (-not $expirationDate)) {
        Write-Error "expirationDate is required if actionPlanId is provided."
        return
    }

    # Convert roles: "uaa" to "User Access Administrator"
    $roles = $roles | ForEach-Object {
        if ($_ -eq "uaa") {
            "User Access Administrator"
        }
        else {
            $_
        }
    }

    # Prepare ActionPlan or SecArch object based on input
    $actionPlan = $null
    $secArch = $null

    if ($actionPlanId) {
        $actionPlan = @{
            ID = $actionPlanId
            DateAdded = $dateAdded
            ExpirationDate = $expirationDate
        }
    }
    elseif ($secArchId) {
        $secArch = @{
            ID = $secArchId
            DateAdded = $dateAdded
        }
    }

    # Create the new exception object
    $newException = @{
        "spnObjectId" = $spnObjectId
        "spnNameLike" = $spnNameLike
        "roles" = $roles
        "azObjectScopeId" = $azObjectScopeId
        "azScopeNameLike" = $azScopeNameLike
        "azureScopeType" = $azureScopeType
        "spnEonId" = $spnEonId
        "azScopeEonId" = $azScopeEonId
        "actionPlan" = $actionPlan
        "secArch" = $secArch
    }

    # Run schema validation using Test-SchemaValidation
    if (-not (Test-SchemaValidation -ExceptionObject $newException)) {
        Write-Error "Schema validation failed for the provided exception object."
        return
    }

    # Load the existing JSON file (initialize as an empty array if it is empty)
    $currentData = @()
    if (Test-Path $filePath) {
        $jsonContent = Get-Content -Path $filePath -Raw
        if (-not [string]::IsNullOrWhiteSpace($jsonContent)) {
            $currentData = $jsonContent | ConvertFrom-Json

            # Convert to array if only a single entry exists in the JSON
            if ($currentData -is [hashtable]) {
                $currentData = @($currentData)
            }
        }
    }

    # Append the new exception object to the current data
    $currentData += $newException

    # Convert back to JSON and save
    $currentData | ConvertTo-Json -Depth 10 | Set-Content -Path $filePath -Force
    Write-Output "Exception added to JSON file at: $filePath"
}

# Helper function to validate date formats
function Validate-DateFormat {
    param (
        [Parameter(Mandatory = $true)]
        [object]$date
    )

    if ($date -is [DateTime]) {
        return $true
    }
    elseif ($date -is [string]) {
        try {
            [DateTime]::ParseExact($date, "yyyy-MM-dd", $null) | Out-Null
            return $true
        }
        catch {
            Write-Error "Date must be in 'yyyy-MM-dd' format."
            return $false
        }
    }
    else {
        Write-Error "Invalid date type. Must be a string or DateTime object."
        return $false
    }
}

##############


# Pester tests for Add-Exception with Schema Validation

Describe 'Add-Exception with Schema Validation' {
    $testFilePath = ".\exceptions.json"

    BeforeAll {
        # Helper function to initialize an empty JSON file
        function Initialize-EmptyJson {
            param ([string]$FilePath)
            @() | ConvertTo-Json | Set-Content -Path $FilePath -Force
        }

        # Mock Test-SchemaValidation function for testing purposes
        function Test-SchemaValidation {
            param (
                [hashtable]$ExceptionObject
            )
            # For testing purposes, assume the schema validation passes if it has certain keys
            return $ExceptionObject.ContainsKey("spnObjectId") -and $ExceptionObject.ContainsKey("roles")
        }

        # Initialize an empty JSON file before starting the tests
        Initialize-EmptyJson -FilePath $testFilePath
    }

    AfterEach {
        # Reset the file content after each test to ensure a clean slate
        Initialize-EmptyJson -FilePath $testFilePath
    }

    It 'Should add an exception with ActionPlan, default DateAdded, and validate schema' {
        $roles = @("uaa")

        Add-Exception -spnObjectId "12345-abcde-67890" -roles $roles `
            -azObjectScopeId "54321-edcba-09876" -azureScopeType "RG" `
            -spnEonId "Dept-001" -azScopeEonId "Dept-001" `
            -actionPlanId "T123" -expirationDate "2025-10-21"

        # Load and validate the JSON
        $result = Get-Content -Path $testFilePath -Raw | ConvertFrom-Json
        $result | Should -HaveCount 1
        $result[0].roles | Should -Contain "User Access Administrator"
        $result[0].actionPlan.DateAdded | Should -Be (Get-Date -Format "yyyy-MM-dd")
    }

    It 'Should fail if schema validation fails' {
        # Override Test-SchemaValidation to simulate a failure
        Mock -CommandName Test-SchemaValidation -MockWith {
            return $false
        }

        $roles = @("owner")

        { Add-Exception -spnObjectId "22222-bbbbb-33333" -roles $roles `
            -azObjectScopeId "44444-ccccc-55555" -azureScopeType "Sub" `
            -spnEonId "Dept-002" -azScopeEonId "Dept-002" `
            -actionPlanId "T124" -expirationDate "2025-12-31" } | Should -Throw
    }

    It 'Should pass if schema validation is successful' {
        # Override Test-SchemaValidation to simulate a successful validation
        Mock -CommandName Test-SchemaValidation -MockWith {
            return $true
        }

        $roles = @("owner")
        $expiration = [DateTime]::ParseExact("2025-12-31", "yyyy-MM-dd", $null)

        Add-Exception -spnObjectId "33333-aaaaa-44444" -roles $roles `
            -azObjectScopeId "55555-ddddd-66666" -azureScopeType "MG" `
            -spnEonId "Dept-003" -azScopeEonId "Dept-003" `
            -actionPlanId "T125" -expirationDate $expiration

        # Load and validate the JSON
        $result = Get-Content -Path $testFilePath -Raw | ConvertFrom-Json
        $result | Should -HaveCount 1
        $result[0].actionPlan.ExpirationDate | Should -Be "2025-12-31"
    }

    It 'Should handle DateTime input and convert it to string' {
        $roles = @("owner")
        $expiration = [DateTime]::ParseExact("2025-12-31", "yyyy-MM-dd", $null)

        Add-Exception -spnObjectId "44444-zzzzz-55555" -roles $roles `
            -azObjectScopeId "66666-eeee-77777" -azureScopeType "RG" `
            -spnEonId "Dept-004" -azScopeEonId "Dept-004" `
            -actionPlanId "T126" -expirationDate $expiration

        # Load and validate the JSON
        $result = Get-Content -Path $testFilePath -Raw | ConvertFrom-Json
        $result | Should -HaveCount 1
        $result[0].actionPlan.ExpirationDate | Should -Be "2025-12-31"
    }
}
