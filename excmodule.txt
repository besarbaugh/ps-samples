# Function: Get-Exceptions
<#
.SYNOPSIS
    Retrieves exceptions from a JSON file located in the root of the repo.

.DESCRIPTION
    This function reads a JSON file containing exception details and converts it into a PowerShell object.

.EXAMPLE
    PS C:\> $exceptions = Get-Exceptions

    Retrieves exceptions from the `exceptions.json` file located in the root of the repo.

.NOTES
    Ensure the JSON file is properly formatted and exists in the root directory.
#>
function Get-Exceptions {
    # Set the path to exceptions.json in the root directory relative to script location
    $FilePath = Join-Path $PSScriptRoot "..\exceptions.json"
    
    try {
        if (Test-Path $FilePath) {
            $jsonContent = Get-Content -Path $FilePath -Raw
            $exceptions = $jsonContent | ConvertFrom-Json
            return $exceptions
        } else {
            throw "File not found: $FilePath"
        }
    } catch {
        Write-Error "Failed to get exceptions from $FilePath : $_"
        return $null
    }
}

# Function: Test-ExceptionSchema
# (No path changes required for this function)
<#
.SYNOPSIS
    Validates an exception against the predefined schema.

.DESCRIPTION
    This function validates that the given exception adheres to the required schema, checking for required fields, 
    correct data types, and allowed values.

.EXAMPLE
    PS C:\> Test-ExceptionSchema -Exception $newException

    Validates the $newException object against the schema.

.NOTES
    Returns $true if validation passes, $false otherwise.
#>
function Test-ExceptionSchema {
    # Same content as before, no path updates required
}

# Function: Add-Exception
<#
.SYNOPSIS
    Adds a new exception to the `exceptions.json` file located in the root of the repo.

.DESCRIPTION
    This function validates a new exception and adds it to the specified `exceptions.json` file. It performs validation,
    duplicate checks, and saves the new exception to the file if it passes validation.

.EXAMPLE
    PS C:\> Add-Exception -SpnNamePatterns $spnNamePatterns -SPNDeptID "Dept001" -ContainerTypes @("RG", "sub") -Roles @("owner") -Environment "Prod" -Dynamic $true -DynamicScope $false -ExceptionType "dynamic" -ExpirationDate (Get-Date).AddMonths(6)

    Adds a new exception to the `exceptions.json` file after validation and duplicate checks.

.NOTES
    Ensure the JSON file is properly formatted and exists in the root directory.
#>
function Add-Exception {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [hashtable]$SpnNamePatterns,
        [Parameter(Mandatory = $true)]
        [string]$SPNDeptID,
        [Parameter(Mandatory = $true)]
        [array]$ContainerTypes,
        [Parameter(Mandatory = $true)]
        [array]$Roles,
        [Parameter(Mandatory = $true)]
        [string]$Environment,
        [Parameter(Mandatory = $true)]
        [bool]$Dynamic,
        [Parameter(Mandatory = $true)]
        [bool]$DynamicScope,
        [Parameter(Mandatory = $true)]
        [string]$ExceptionType,
        [datetime]$ExpirationDate = $null
    )

    try {
        # Path to exceptions.json
        $FilePath = Join-Path $PSScriptRoot "..\exceptions.json"

        # Build the new exception object
        $newException = @{
            spnname_patterns = $SpnNamePatterns
            SPNdeptID        = $SPNDeptID
            containertype    = $ContainerTypes
            role             = $Roles
            environment      = $Environment
            dynamic          = $Dynamic
            dynamic_scope    = $DynamicScope
            exception_type   = $ExceptionType
            expiration_date  = $ExpirationDate
        }

        # Validate the new exception against the schema
        if (-not (Test-ExceptionSchema -Exception $newException)) {
            Write-Error "Validation failed. The exception could not be added."
            return
        }

        # Load the existing exceptions from the JSON file
        try {
            $exceptions = Get-Exceptions
        } catch {
            Write-Error "Failed to load the exceptions file: $FilePath : $_"
            return
        }

        # Check for duplicates
        $duplicate = $exceptions.Exceptions | Where-Object {
            $_.spnname_patterns.patterns -eq $SpnNamePatterns.patterns -and
            $_.containertype -eq $ContainerTypes -and
            $_.role -eq $Roles -and
            $_.environment -eq $Environment
        }

        if ($duplicate) {
            Write-Error "Duplicate exception found. No changes made."
            return
        }

        # Add the new exception to the list
        $exceptions.Exceptions += $newException

        # Save the updated exceptions list to the JSON file
        try {
            Save-Exceptions -ExceptionsList $exceptions
        } catch {
            Write-Error "Failed to save the updated exceptions file: $FilePath : $_"
            return
        }

        Write-Host "New exception added successfully."
    } catch {
        Write-Error "An unexpected error occurred: $_"
    }
}

# Function: Save-Exceptions
<#
.SYNOPSIS
    Saves the updated exceptions list to the `exceptions.json` file located in the root of the repo.

.DESCRIPTION
    This function takes a hashtable of exceptions and writes it to the specified `exceptions.json` file.

.EXAMPLE
    PS C:\> Save-Exceptions -ExceptionsList $exceptions

    Saves the exceptions list to the `exceptions.json` file.

.NOTES
    Ensure the file is accessible and writable before using this function.
#>
function Save-Exceptions {
    param (
        [Parameter(Mandatory = $true)]
        [hashtable]$ExceptionsList
    )
    
    try {
        $FilePath = Join-Path $PSScriptRoot "..\exceptions.json"
        $jsonContent = $ExceptionsList | ConvertTo-Json -Depth 10
        $jsonContent | Out-File -FilePath $FilePath -Force
    } catch {
        Write-Error "Failed to save exceptions to $FilePath : $_"
    }
}

# Export module functions
Export-ModuleMember -Function Get-Exceptions, Test-ExceptionSchema, Add-Exception, Save-Exceptions
